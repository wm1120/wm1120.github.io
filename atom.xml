<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>万苗的博客</title>
  
  <subtitle>万大苗你好棒哦</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wm1120.github.io/"/>
  <updated>2018-04-27T02:49:56.419Z</updated>
  <id>http://wm1120.github.io/</id>
  
  <author>
    <name>万苗</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTPS工作原理和TCP握手机制</title>
    <link href="http://wm1120.github.io/2018/04/27/HTTPS%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%92%8CTCP%E6%8F%A1%E6%89%8B%E6%9C%BA%E5%88%B6/"/>
    <id>http://wm1120.github.io/2018/04/27/HTTPS工作原理和TCP握手机制/</id>
    <published>2018-04-27T02:49:56.000Z</published>
    <updated>2018-04-27T02:49:56.419Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端面试题集锦(二)</title>
    <link href="http://wm1120.github.io/2018/04/22/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86%E9%94%A6-%E4%BA%8C/"/>
    <id>http://wm1120.github.io/2018/04/22/前端面试题集锦-二/</id>
    <published>2018-04-22T04:07:55.000Z</published>
    <updated>2018-04-27T02:48:39.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端理由使用的原理"><a href="#前端理由使用的原理" class="headerlink" title="前端理由使用的原理"></a>前端理由使用的原理</h1><h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><p>简单的说，路由是根据不同的url地址展示不同的内容或页面。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>前端路由更多用在单页应用上，也就是SPA，因为单页应用，基本上都是前后端分离，后端自然也就不会给前端提</p><p>供路由。</p><p>前端路由和后端路由在实现技术上不一样，但是原理都是一样的。在HTML5的history API出现之前，前端路由都</p><p>是通过hash来实现的，hash能兼容低版本浏览器。</p><h2 id="两种实现前端路由的方式"><a href="#两种实现前端路由的方式" class="headerlink" title="两种实现前端路由的方式"></a>两种实现前端路由的方式</h2><h3 id="HTML5-History"><a href="#HTML5-History" class="headerlink" title="HTML5 History"></a>HTML5 History</h3><p>两个新增的API：<code>history.pushState</code> 和 <code>history.replaceState</code>，两个 API 都会操作浏览器的历史记录，而不会</p><p>引起页面的刷新。</p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>就是url中看到的#，我们需要一个根据监听哈希变化触发的事件（hashchange）事件。我们用window.location</p><p>处理哈希的改变时不会重新渲染页面，而是当做新页面加到历史记录中，这样我们跳转页面就可以在hashchange</p><p>事件中注册ajax从而改变页面内容。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>从性能和用户体验的层面来比较的话，后端路由每次访问一个新页面的时候都要向服务器发送请求，然后服务器</p><p>再、响应请求，这个过程肯定会有延迟。而前端路由在访问一个新页面的时候仅仅是变换了一下路径而已，没有了</p><p>网络延迟，对于用户体验来说会有相当大的提升。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>使用浏览器的前进，后退键的时候会重新发送请求，没有合理地利用缓存。</p><h1 id="Restful-API是什么"><a href="#Restful-API是什么" class="headerlink" title="Restful API是什么"></a>Restful API是什么</h1><ol><li><p>Restful的意思就是表现层状态转化。</p></li><li><p>“表现层”其实是指“资源”（Resources）的“表现层”，把“资源”具体呈现出来的形式，叫做它的“表现</p><p>层”（Representation)。</p></li><li><p>所谓“资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首</p><p>歌曲、一种服务，总之就是一个具体的实在，每一个URL代表一种资源。</p></li><li><p>如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转化”（State Transfer）。而这种转</p><p>化是建立在表现层之上的，所以就是“表现层状态转化”。</p></li><li><p>Restful就是客户端和服务器之间，传递这种资源的某种表现层。</p></li><li><p>客户端通过四个HTTP动词，对服务器端资源进行操作，实现“表现层状态转化”。</p><p>Restful API就是符合Restful架构的API设计。</p><p>Restful API一些具体实践：</p><ol><li>应该尽量将API部署在专用域名之下。如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</li><li>应该将API的版本号放入URL。</li><li>对于资源的具体操作类型，由HTTP动词表示。</li><li>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果</li><li>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名<br>…..                                                                                                    </li></ol></li></ol><h1 id="script标签的defer、async的区别"><a href="#script标签的defer、async的区别" class="headerlink" title="script标签的defer、async的区别"></a>script标签的defer、async的区别</h1><p>defer是在HTML解析完之后才会执行，如果是多个，按照加载的顺序依次执行</p><p>async是在加载完成后立即执行，如果是多个，执行顺序和加载顺序无关</p><h1 id="同源与跨域"><a href="#同源与跨域" class="headerlink" title="同源与跨域"></a>同源与跨域</h1><h2 id="什么是同源策略及限制"><a href="#什么是同源策略及限制" class="headerlink" title="什么是同源策略及限制"></a>什么是同源策略及限制</h2><h3 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h3><p>同源策略：从一个源加载的文档或脚本如何与另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键安</p><p>全机制。</p><p>源：一个源指的是主机名、协议和端口号的组合，必须相同。</p><h3 id="同源的限制"><a href="#同源的限制" class="headerlink" title="同源的限制"></a>同源的限制</h3><p>不是一个源的文档没有权利去操作另一个源的文档，限制在如下方面：</p><ul><li>Cookie、LocalStorage和indexDB无法读取。</li><li>DOM无法获取。</li><li>AJAX请求不能发送。</li></ul><h2 id="前后端如何通信"><a href="#前后端如何通信" class="headerlink" title="前后端如何通信"></a>前后端如何通信</h2><p>最常见的三种：</p><ul><li>Ajax：同源下面的通信方式。</li><li>WebSocket：不受同源策略限制。</li><li>CORS：新的通信标准。</li></ul><h2 id="如何创建ajax"><a href="#如何创建ajax" class="headerlink" title="如何创建ajax"></a>如何创建ajax</h2><p>需要留意的如下几点：</p><ul><li>XMLHttpRequest对象的工作流程。</li><li>兼容性处理。</li><li>事件触发的条件。</li><li>事件触发的顺序。</li></ul><h2 id="跨域通信几种方式"><a href="#跨域通信几种方式" class="headerlink" title="跨域通信几种方式"></a>跨域通信几种方式</h2><h3 id="JSONP原理"><a href="#JSONP原理" class="headerlink" title="JSONP原理"></a>JSONP原理</h3><p>基本原理：利用script标签的异步加载特性实现给服务器传一个回调函数，服务器返回一个传递过去的回调函数名</p><p>的JS代码。</p><h3 id="Hash-1"><a href="#Hash-1" class="headerlink" title="Hash"></a>Hash</h3><p>利用hash，场景是在当前页面A通过iframe或frame嵌入了跨域的页面B</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//在A中伪代码如下：</span><br><span class="line">var B = document.getElementByTagName(&apos;iframe&apos;);</span><br><span class="line">B.src = B.src + &apos;#&apos; + &apos;data&apos;;</span><br><span class="line">//在B中伪代码如下：</span><br><span class="line">window.onhashchange = function ()&#123;</span><br><span class="line">    var data = window.location.hash;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h3><p>窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Bwindow.postMessage(&apos;data&apos;, &apos;http://B.com&apos;);</span><br><span class="line">//在窗口B中监听</span><br><span class="line">Awindow.addEventLister(&apos;message&apos;,function(event)&#123;</span><br><span class="line">    console.log(event.origin);</span><br><span class="line">    console.log(event.source);</span><br><span class="line">    console.log(event.data);</span><br><span class="line">&#125;,false);</span><br></pre></td></tr></table></figure><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var ws = new WebSocket(&apos;wss://echo.websocket.org&apos;);</span><br></pre></td></tr></table></figure><p>监听<code>onopen</code>,<code>onmessage</code>,<code>onclose</code>事件 。</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p><p>它允许浏览器向跨源服务器，发出<a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener"><code>XMLHttpRequest</code></a>请求，从而克服了AJAX只能<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">同源</a>使用的限制。</p><h1 id="原型与闭包相关问题"><a href="#原型与闭包相关问题" class="headerlink" title="原型与闭包相关问题"></a>原型与闭包相关问题</h1><h2 id="原型是什么"><a href="#原型是什么" class="headerlink" title="原型是什么"></a>原型是什么</h2><p>原型就是一个普通的对象，每个对象都有一个原型（Object除外）,原型能存储我们的方法，构造函数创建出来的</p><p>实例对象能够引用原型中方法。</p><h2 id="查看原型"><a href="#查看原型" class="headerlink" title="查看原型"></a>查看原型</h2><p>以前一般使用对象的<strong>proto</strong>属性，ES6推出后，推荐使用Object.getPrototypeOf()方法来获取对象。</p><h2 id="闭包是什么"><a href="#闭包是什么" class="headerlink" title="闭包是什么"></a>闭包是什么</h2><p>专业来说：当一个内部函数被其外部函数之外的变量引用，就形成一个闭包。</p><p>一般来说：闭包就是一个具有封闭功能与包裹功能的结构，是为了实现具有私有访问空间的函数，函数可以构成闭</p><p>包，因为函数内部定义的数据函数外部无法访问外，即函数具有封闭性；函数可以封装代码即具有包裹性，所以函</p><p>数可以构成闭包。</p><p>创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量。</p><h2 id="闭包的特性"><a href="#闭包的特性" class="headerlink" title="闭包的特性"></a>闭包的特性</h2><p>闭包有三个特性：</p><ul><li>函数嵌套函数。</li><li>函数内部可以引用外部函数的参数和变量。</li><li>参数和变量不会被垃圾回收机制回收。</li></ul><h2 id="闭包有什么用，使用场景"><a href="#闭包有什么用，使用场景" class="headerlink" title="闭包有什么用，使用场景"></a>闭包有什么用，使用场景</h2><p>当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中但又不会“污染”全局的变量时，就可以用闭</p><p>包来定义模块。</p><h2 id="闭包的优缺点"><a href="#闭包的优缺点" class="headerlink" title="闭包的优缺点"></a>闭包的优缺点</h2><p>闭包常驻在内存中，会增大内存使用量，使用不当很容易造成内存泄漏。</p><h2 id="嵌套函数的闭包"><a href="#嵌套函数的闭包" class="headerlink" title="嵌套函数的闭包"></a>嵌套函数的闭包</h2><p>不是，当一个内部函数被其外部函数之外的变量引用时，才会形成闭包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function aaa() &#123;  </span><br><span class="line">var a = 1;  </span><br><span class="line"></span><br><span class="line">    return function()&#123;</span><br><span class="line"></span><br><span class="line">    alert(a++)</span><br><span class="line"></span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">&#125;        </span><br><span class="line"></span><br><span class="line">var fun = aaa();  </span><br><span class="line"></span><br><span class="line">fun();// 1 执行后 a++，，然后a还在~  </span><br><span class="line"></span><br><span class="line">fun();// 2  </span><br><span class="line"></span><br><span class="line">fun = null;//a被回收！！</span><br></pre></td></tr></table></figure><h1 id="如何进行错误监控"><a href="#如何进行错误监控" class="headerlink" title="如何进行错误监控"></a>如何进行错误监控</h1><h2 id="前端错误分类"><a href="#前端错误分类" class="headerlink" title="前端错误分类"></a>前端错误分类</h2><ul><li>即时运行错误（代码错误)</li><li>资源加载错误</li></ul><h2 id="错误的捕捉方式"><a href="#错误的捕捉方式" class="headerlink" title="错误的捕捉方式"></a>错误的捕捉方式</h2><p>即时运行错误的捕获方式：</p><ul><li>try…catch</li><li>window.onerror</li></ul><p>资源加载错误：</p><ul><li>object.onerror(如：img,script)</li><li>performmance.getEntries()</li><li>Error事件捕获</li></ul><p>延伸：跨域的js运行错误可以捕获吗，错误提示什么，应该怎么处理？</p><p>可以。</p><p>Script error</p><p>1.在script标签增加crossorigin属性</p><p>2.设置js资源响应头Access-Control-Allow-Orgin:*</p><h2 id="上报错误的基本原理"><a href="#上报错误的基本原理" class="headerlink" title="上报错误的基本原理"></a>上报错误的基本原理</h2><p>采用Ajax通信方式上报</p><p>利用Image对象上报</p><h1 id="DOM事件类"><a href="#DOM事件类" class="headerlink" title="DOM事件类"></a>DOM事件类</h1><h2 id="DOM事件的级别"><a href="#DOM事件的级别" class="headerlink" title="DOM事件的级别"></a>DOM事件的级别</h2><ul><li>DOM0, element.onclick = function(){}</li><li>DOM2, element.addEventListener(‘click’,function(){},false);</li></ul><h2 id="DOM事件模型"><a href="#DOM事件模型" class="headerlink" title="DOM事件模型"></a>DOM事件模型</h2><p>指的是冒泡和捕获。</p><h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p>捕获阶段 -&gt; 目标阶段 -&gt; 冒泡阶段</p><h2 id="DOM事件捕获流程"><a href="#DOM事件捕获流程" class="headerlink" title="DOM事件捕获流程"></a>DOM事件捕获流程</h2><p>window –&gt; document –&gt; documentElement(html标签) –&gt; body –&gt; …… –&gt; 目标对象。</p><h2 id="Event对象常见应用"><a href="#Event对象常见应用" class="headerlink" title="Event对象常见应用"></a>Event对象常见应用</h2><ul><li><p>event.preventDefault()，阻止默认。</p></li><li><p>event.stopPropagation()，阻止事件冒泡。</p></li><li><p>event.stopImmediatePropagation()，阻止剩余的事件处理函数执行并且防止事件冒泡到DOM树上，这个方</p><p>法不接受任何参数。</p></li><li><p>event.currentTarget，返回绑定事件的元素。</p></li><li><p>event.target，返回触发事件的元素。</p></li></ul><h2 id="如何自定义事件"><a href="#如何自定义事件" class="headerlink" title="如何自定义事件"></a>如何自定义事件</h2><p>Event，不能传递参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var eve = new Event(&apos;自定义事件名&apos;); </span><br><span class="line">ev.addEventListener(&apos;自定义事件名&apos;, function()&#123; </span><br><span class="line">     console.log(&apos;自定义事件&apos;)</span><br><span class="line">&#125;);</span><br><span class="line">ev.dispatchEvent(eve);</span><br></pre></td></tr></table></figure><p>CustomEvent，还可以指定参数.</p><h1 id="本地起了一个http-server，为什么只能在同一个wifi（局域网）上访问"><a href="#本地起了一个http-server，为什么只能在同一个wifi（局域网）上访问" class="headerlink" title="本地起了一个http server，为什么只能在同一个wifi（局域网）上访问"></a>本地起了一个http server，为什么只能在同一个wifi（局域网）上访问</h1><p>你没有公网IP当然就不能被外网访问了。常见的WIFI情况下，一般的ip会是~192.168.0.x·这样的，只是对局域网</p><p>(同WIFI下)可见，但是外网是访问不了的。</p><h1 id="BFC相关问题"><a href="#BFC相关问题" class="headerlink" title="BFC相关问题"></a>BFC相关问题</h1><p>BFC(Block formatting contex)直译为“块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box 参</p><p>与，它规定了内部的Block-level Box 如何布局，并且与这个区域外部毫不相干。</p><h2 id="BFC的渲染规则"><a href="#BFC的渲染规则" class="headerlink" title="BFC的渲染规则"></a>BFC的渲染规则</h2><ul><li><p>BFC这个元素的垂直方向的边距会发生重叠。</p></li><li><p>BFC的区域不会浮动元素的box重叠（清除浮动原理）。</p></li><li><p>BFC在页面上是一个独立的容器，外面的元素不会影响它里面的元素，反过来它里面的元素也不会影响外面的</p><p>元素。</p></li><li><p>计算BFC的高度的时候，浮动元素也会参加计算。</p></li></ul><h2 id="如何创建BFC？"><a href="#如何创建BFC？" class="headerlink" title="如何创建BFC？"></a>如何创建BFC？</h2><ul><li>overfloat 属性不为visible。</li><li>float属性不为none。</li><li>position属性不为absolute或fixed。</li><li>display属性为inline-block，table-cell，table-caption，flex，inline-flex。</li></ul><h2 id="BFC使用场景"><a href="#BFC使用场景" class="headerlink" title="BFC使用场景"></a>BFC使用场景</h2><p>解决边距重叠的问题。</p><h1 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h1><ul><li>JS或者服务器端硬编码，resize事件，判断屏幕大小加载不同的图片。</li><li>img srcset方法。</li><li>svg。</li><li>第三库polyfill。</li></ul><h1 id="UTF-8和Unicode的区别"><a href="#UTF-8和Unicode的区别" class="headerlink" title="UTF-8和Unicode的区别"></a>UTF-8和Unicode的区别</h1><p>UTF-8就是在互联网上使用最广的一种unicode的实现方式。</p><p>Unicode的出现是为了统一地区性文字编码方案，为解决unicode如何在网络上传输的问题，于是面向传输的众多</p><p> UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个</p><p>位。</p><p>ASCII –&gt; 地区性编码（GBK） –&gt; Unicode –&gt; UTF-8。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端理由使用的原理&quot;&gt;&lt;a href=&quot;#前端理由使用的原理&quot; class=&quot;headerlink&quot; title=&quot;前端理由使用的原理&quot;&gt;&lt;/a&gt;前端理由使用的原理&lt;/h1&gt;&lt;h2 id=&quot;什么是路由&quot;&gt;&lt;a href=&quot;#什么是路由&quot; class=&quot;header
      
    
    </summary>
    
      <category term="前端面试" scheme="http://wm1120.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>前端面试题集锦（一）</title>
    <link href="http://wm1120.github.io/2018/04/21/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86%E9%94%A6-%E4%B8%80/"/>
    <id>http://wm1120.github.io/2018/04/21/前端面试题集锦-一/</id>
    <published>2018-04-21T11:01:20.000Z</published>
    <updated>2018-04-23T08:58:23.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谈谈对前端安全的理解，有什么，怎么防范"><a href="#谈谈对前端安全的理解，有什么，怎么防范" class="headerlink" title="谈谈对前端安全的理解，有什么，怎么防范"></a>谈谈对前端安全的理解，有什么，怎么防范</h1><p>   前端安全问题主要有XSS，CSRF攻击。</p><h2 id="XSS：跨站脚本攻击"><a href="#XSS：跨站脚本攻击" class="headerlink" title="XSS：跨站脚本攻击"></a>XSS：跨站脚本攻击</h2><p>   它允许用户将恶意代码植入到提供其他用户使用的页面中，可以简单的理解为一种javascript代码注入。</p><p>XSS的防御措施：</p><ol><li><p>过滤转义输入输出。</p></li><li><p>避免使用eval,new Function等执行字符串的方法，除非确定字符串和用户输入无关。</p></li><li><p>使用cookie的httpOnly属性，加上了这个属性的cookie字段，js是无法进行读写的。</p></li><li><p>使用innerHTML、document.write的时候，如果数据是用户输入的，那么需要对象关键字符进行过滤与转义。</p></li></ol><h2 id="CSRF：跨站请求伪造"><a href="#CSRF：跨站请求伪造" class="headerlink" title="CSRF：跨站请求伪造"></a>CSRF：跨站请求伪造</h2><p>   其实就是网站中的一些提交行为，被黑客利用，在你访问黑客的网站的时候进行操作，会被操作到其他网站中。</p><p>CSRF防御措施：</p><ol><li><p>检测http referer是否同域名。</p></li><li><p>避免登录的session长时间存储在客户端中。</p></li><li><p>关键请求使用验证码或token机制。</p></li></ol><p>其他地方的一些攻击方法还有HTTP劫持，界面操作劫持。 ​</p><h1 id="使用箭头函数需要注意的地方"><a href="#使用箭头函数需要注意的地方" class="headerlink" title="使用箭头函数需要注意的地方"></a>使用箭头函数需要注意的地方</h1><p>   当要求动态上下文的时候，你就不能使用箭头函数，比如：定义方法，用构造器创建对象，处理时间时用this获</p><p>   取目标。</p><h1 id="webpack-load的原理"><a href="#webpack-load的原理" class="headerlink" title="webpack.load的原理"></a>webpack.load的原理</h1><p>   loaders是你用在app源码上的转换元件。他们是用node.js运行的，把源文件作为参数返回新的资源函数。</p><h1 id="ES6-let和const"><a href="#ES6-let和const" class="headerlink" title="ES6 let和const"></a>ES6 let和const</h1><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>   let是更完美的var。</p><ol><li><p>let声明的变量拥有块级作用域，let声明仍然保留了提升的特性，但不会盲目提升。</p></li><li><p>let声明的全局变量不是全局对象的属性，不可以通过windows.变量名的方式访问。</p></li><li><p>形如for(let x ……)的循环在每次迭代是=时都为x创建新的绑定。</p></li><li><p>let声明的变量直到控制流到达该变量被定义的代码时才会被装载，所以在到达之前使用该变量会触发错误。</p></li></ol><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>   定义常量值，不可以重新赋值，但是如果值是一个对象，可以改变对象里的属性值。<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;&quot;a&quot;:1, &quot;b&quot;:2&#125;;</span><br><span class="line"></span><br><span class="line">obj.a = 3;</span><br><span class="line"></span><br><span class="line">obj = &#123; &#125;; //重新赋值报错！</span><br><span class="line"></span><br><span class="line">console.log(obj.a);  //3</span><br></pre></td></tr></table></figure></p><h1 id="CSS3-box-sizing的作用"><a href="#CSS3-box-sizing的作用" class="headerlink" title="CSS3 box-sizing的作用"></a>CSS3 box-sizing的作用</h1><p>   设置CSS盒模型为标准模型或IE模型。标准模型的宽度只包括content，而IE模型包括border和padding。 ​</p><p>   box-sizing属性可以为三个值之一：</p><ol><li><p>content-box，默认值，border和padding不计算入width之内。</p></li><li><p>padding-box，padding计算入width内。</p></li><li><p>border-box，border和padding计算入width内。</p></li></ol><h1 id="git命令，如何批量删除分支"><a href="#git命令，如何批量删除分支" class="headerlink" title="git命令，如何批量删除分支"></a>git命令，如何批量删除分支</h1><p>   git branch| grep ‘branchName’ |xargs git</p><p>   branch-D,从分支列表匹配到指定分支，然后一个一个（分成小块）传递给删除分支的吗命令，最后进行删除。</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch 输出当前分支列表</span><br><span class="line"></span><br><span class="line">grep 是对 git branch 的输出结果进行匹配，匹配值当然就是branchName</span><br><span class="line"></span><br><span class="line">xargs 的作用是将参数列表转换成小块分段传递给其他命令</span><br></pre></td></tr></table></figure><h1 id="创建对象的三种方法"><a href="#创建对象的三种方法" class="headerlink" title="创建对象的三种方法"></a>创建对象的三种方法</h1><p>   第一种方式，字面量</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var str = &#123;name: &quot;胡歌&quot;&#125;</span><br></pre></td></tr></table></figure><p>   第二种方式，通过构造函数</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var str = new Object(&#123;name: &quot;梅长苏&quot;&#125;)</span><br><span class="line"></span><br><span class="line">var M = function(name)&#123;</span><br><span class="line"></span><br><span class="line">   this.name = name</span><br><span class="line">&#125;</span><br><span class="line">var str1 = new M(&quot;景天&quot;)</span><br></pre></td></tr></table></figure><p>   第三种方式，Object.create</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var p = &#123;name: &quot;胡歌&quot;&#125;</span><br><span class="line"></span><br><span class="line">var str2 = Object.create(p)</span><br></pre></td></tr></table></figure><p>   新创建的对象str2的原型就是p，同时str2也拥有了name属性。</p><h1 id="JS实现继承的几种方式"><a href="#JS实现继承的几种方式" class="headerlink" title="JS实现继承的几种方式"></a>JS实现继承的几种方式</h1><h2 id="借用构造函数实现继承"><a href="#借用构造函数实现继承" class="headerlink" title="借用构造函数实现继承"></a>借用构造函数实现继承</h2>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Parent1()&#123; </span><br><span class="line"></span><br><span class="line">   this.name = &quot;parent1&quot;</span><br><span class="line">&#125; </span><br><span class="line">function Child1()&#123; </span><br><span class="line"></span><br><span class="line">   Parent1.call(this); </span><br><span class="line"></span><br><span class="line">   this.type = &quot;child1&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   缺点：Child1无法继承Parent1的原型对象，并没有真正的实现继承（部分继承）。</p><h2 id="借用原型链实现继承"><a href="#借用原型链实现继承" class="headerlink" title="借用原型链实现继承"></a>借用原型链实现继承</h2>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Parent2()&#123;</span><br><span class="line"></span><br><span class="line">   this.name = &quot;parent2&quot;; </span><br><span class="line"></span><br><span class="line">   this.play = [1,2,3]; </span><br><span class="line">&#125; </span><br><span class="line">function Child2()&#123;</span><br><span class="line"></span><br><span class="line">   this.type = &quot;child2&quot;; </span><br><span class="line">&#125; </span><br><span class="line">Child2.prototype = new Parent2();</span><br></pre></td></tr></table></figure><p>   缺点：原型对象的属性是共享的。</p><h2 id="组合式继承"><a href="#组合式继承" class="headerlink" title="组合式继承"></a>组合式继承</h2>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Parent3()&#123; </span><br><span class="line"></span><br><span class="line">   this.name = &quot;parent3&quot;; </span><br><span class="line"></span><br><span class="line">   this.play = [1,2,3]; </span><br><span class="line">&#125; </span><br><span class="line">function Child3()&#123; </span><br><span class="line"></span><br><span class="line">   Parent3.call(this); </span><br><span class="line"></span><br><span class="line">   this.type = &quot;child3&quot;; </span><br><span class="line">&#125;</span><br><span class="line">Child3.prototype = Object.create(Parent3.prototype);</span><br><span class="line"></span><br><span class="line">Child3.prototype.constructor = Child3;</span><br></pre></td></tr></table></figure><h1 id="当new-Foo-时发生了什么"><a href="#当new-Foo-时发生了什么" class="headerlink" title="当new Foo()时发生了什么"></a>当new Foo()时发生了什么</h1><ol><li><p>创建了一个新的对象。</p></li><li><p>将新创建的空对象的隐式原型指向其构造函数的显示原型。</p></li><li><p>将this指向这个新对象。</p></li><li><p>如果无返回值或者返回一个非对象值，则将新对象返回，如果返回值是一个新对象的话直接返回该对象。    ​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;谈谈对前端安全的理解，有什么，怎么防范&quot;&gt;&lt;a href=&quot;#谈谈对前端安全的理解，有什么，怎么防范&quot; class=&quot;headerlink&quot; title=&quot;谈谈对前端安全的理解，有什么，怎么防范&quot;&gt;&lt;/a&gt;谈谈对前端安全的理解，有什么，怎么防范&lt;/h1&gt;&lt;p&gt;  
      
    
    </summary>
    
      <category term="前端面试" scheme="http://wm1120.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
</feed>
